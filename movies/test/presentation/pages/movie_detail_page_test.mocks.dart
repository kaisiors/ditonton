// Mocks generated by Mockito 5.3.2 from annotations
// in movies/test/presentation/pages/movie_detail_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i11;

import 'package:flutter_bloc/flutter_bloc.dart' as _i12;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movies/domain/entities/movie_detail.dart' as _i13;
import 'package:movies/domain/usecases/get_movie_detail.dart' as _i2;
import 'package:movies/domain/usecases/get_movie_recommendations.dart' as _i4;
import 'package:movies/domain/usecases/get_watchlist_movies.dart' as _i6;
import 'package:movies/domain/usecases/get_watchlist_status.dart' as _i7;
import 'package:movies/domain/usecases/remove_watchlist.dart' as _i9;
import 'package:movies/domain/usecases/save_watchlist.dart' as _i8;
import 'package:movies/presentation/bloc/detail/detail_cubit.dart' as _i3;
import 'package:movies/presentation/bloc/recommendation/recommendation_cubit.dart'
    as _i5;
import 'package:movies/presentation/bloc/watchlist/watchlist_cubit.dart'
    as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetMovieDetail_0 extends _i1.SmartFake
    implements _i2.GetMovieDetail {
  _FakeGetMovieDetail_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDetailMovieState_1 extends _i1.SmartFake
    implements _i3.DetailMovieState {
  _FakeDetailMovieState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetMovieRecommendations_2 extends _i1.SmartFake
    implements _i4.GetMovieRecommendations {
  _FakeGetMovieRecommendations_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRecommendationMovieState_3 extends _i1.SmartFake
    implements _i5.RecommendationMovieState {
  _FakeRecommendationMovieState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetWatchlistMovies_4 extends _i1.SmartFake
    implements _i6.GetWatchlistMovies {
  _FakeGetWatchlistMovies_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetWatchListStatus_5 extends _i1.SmartFake
    implements _i7.GetWatchListStatus {
  _FakeGetWatchListStatus_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSaveWatchlist_6 extends _i1.SmartFake implements _i8.SaveWatchlist {
  _FakeSaveWatchlist_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRemoveWatchlist_7 extends _i1.SmartFake
    implements _i9.RemoveWatchlist {
  _FakeRemoveWatchlist_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWatchlistMovieState_8 extends _i1.SmartFake
    implements _i10.WatchlistMovieState {
  _FakeWatchlistMovieState_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DetailMovieCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockDetailMovieCubit extends _i1.Mock implements _i3.DetailMovieCubit {
  @override
  _i2.GetMovieDetail get detailMovies => (super.noSuchMethod(
        Invocation.getter(#detailMovies),
        returnValue: _FakeGetMovieDetail_0(
          this,
          Invocation.getter(#detailMovies),
        ),
        returnValueForMissingStub: _FakeGetMovieDetail_0(
          this,
          Invocation.getter(#detailMovies),
        ),
      ) as _i2.GetMovieDetail);
  @override
  _i3.DetailMovieState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeDetailMovieState_1(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeDetailMovieState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.DetailMovieState);
  @override
  _i11.Stream<_i3.DetailMovieState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i11.Stream<_i3.DetailMovieState>.empty(),
        returnValueForMissingStub: _i11.Stream<_i3.DetailMovieState>.empty(),
      ) as _i11.Stream<_i3.DetailMovieState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i11.Future<void> getDetail(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getDetail,
          [id],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
  @override
  void emit(_i3.DetailMovieState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i12.Change<_i3.DetailMovieState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i11.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
}

/// A class which mocks [RecommendationMovieCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecommendationMovieCubit extends _i1.Mock
    implements _i5.RecommendationMovieCubit {
  @override
  _i4.GetMovieRecommendations get recommendationMovies => (super.noSuchMethod(
        Invocation.getter(#recommendationMovies),
        returnValue: _FakeGetMovieRecommendations_2(
          this,
          Invocation.getter(#recommendationMovies),
        ),
        returnValueForMissingStub: _FakeGetMovieRecommendations_2(
          this,
          Invocation.getter(#recommendationMovies),
        ),
      ) as _i4.GetMovieRecommendations);
  @override
  _i5.RecommendationMovieState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeRecommendationMovieState_3(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeRecommendationMovieState_3(
          this,
          Invocation.getter(#state),
        ),
      ) as _i5.RecommendationMovieState);
  @override
  _i11.Stream<_i5.RecommendationMovieState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i11.Stream<_i5.RecommendationMovieState>.empty(),
        returnValueForMissingStub:
            _i11.Stream<_i5.RecommendationMovieState>.empty(),
      ) as _i11.Stream<_i5.RecommendationMovieState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i11.Future<void> getData(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getData,
          [id],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
  @override
  void emit(_i5.RecommendationMovieState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i12.Change<_i5.RecommendationMovieState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i11.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
}

/// A class which mocks [WatchlistMovieCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockWatchlistMovieCubit extends _i1.Mock
    implements _i10.WatchlistMovieCubit {
  @override
  _i6.GetWatchlistMovies get getWatchlistMovies => (super.noSuchMethod(
        Invocation.getter(#getWatchlistMovies),
        returnValue: _FakeGetWatchlistMovies_4(
          this,
          Invocation.getter(#getWatchlistMovies),
        ),
        returnValueForMissingStub: _FakeGetWatchlistMovies_4(
          this,
          Invocation.getter(#getWatchlistMovies),
        ),
      ) as _i6.GetWatchlistMovies);
  @override
  _i7.GetWatchListStatus get getWatchListStatus => (super.noSuchMethod(
        Invocation.getter(#getWatchListStatus),
        returnValue: _FakeGetWatchListStatus_5(
          this,
          Invocation.getter(#getWatchListStatus),
        ),
        returnValueForMissingStub: _FakeGetWatchListStatus_5(
          this,
          Invocation.getter(#getWatchListStatus),
        ),
      ) as _i7.GetWatchListStatus);
  @override
  _i8.SaveWatchlist get saveWatchlist => (super.noSuchMethod(
        Invocation.getter(#saveWatchlist),
        returnValue: _FakeSaveWatchlist_6(
          this,
          Invocation.getter(#saveWatchlist),
        ),
        returnValueForMissingStub: _FakeSaveWatchlist_6(
          this,
          Invocation.getter(#saveWatchlist),
        ),
      ) as _i8.SaveWatchlist);
  @override
  _i9.RemoveWatchlist get removeWatchlist => (super.noSuchMethod(
        Invocation.getter(#removeWatchlist),
        returnValue: _FakeRemoveWatchlist_7(
          this,
          Invocation.getter(#removeWatchlist),
        ),
        returnValueForMissingStub: _FakeRemoveWatchlist_7(
          this,
          Invocation.getter(#removeWatchlist),
        ),
      ) as _i9.RemoveWatchlist);
  @override
  String get message => (super.noSuchMethod(
        Invocation.getter(#message),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  set message(String? _message) => super.noSuchMethod(
        Invocation.setter(
          #message,
          _message,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i10.WatchlistMovieState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeWatchlistMovieState_8(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeWatchlistMovieState_8(
          this,
          Invocation.getter(#state),
        ),
      ) as _i10.WatchlistMovieState);
  @override
  _i11.Stream<_i10.WatchlistMovieState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i11.Stream<_i10.WatchlistMovieState>.empty(),
        returnValueForMissingStub:
            _i11.Stream<_i10.WatchlistMovieState>.empty(),
      ) as _i11.Stream<_i10.WatchlistMovieState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i11.Future<void> getDataWatchlist() => (super.noSuchMethod(
        Invocation.method(
          #getDataWatchlist,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
  @override
  _i11.Future<void> getStatus(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getStatus,
          [id],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
  @override
  _i11.Future<void> addToWatchlist(_i13.MovieDetail? movie) =>
      (super.noSuchMethod(
        Invocation.method(
          #addToWatchlist,
          [movie],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
  @override
  _i11.Future<void> removeFromWatchlist(_i13.MovieDetail? movie) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeFromWatchlist,
          [movie],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
  @override
  void emit(_i10.WatchlistMovieState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i12.Change<_i10.WatchlistMovieState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i11.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
}
